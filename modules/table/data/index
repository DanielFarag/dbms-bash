#!/bin/bash

list_table_records() {
    local desired_cols=()
    local filter_col_name=""
    local filter_val=""
    local filter_col_index=""
    local data_file
    data_file="$(CURRENT_TABLE_DATA_PATH)"

    if [[ ! -f "$data_file" ]]; then
        echo "Error: Table data file not found!"
        return 1
    fi

    mapfile -t fields < <(get_table_columns)

    echo "Available columns:"

    get_table_columns | awk -F':' '{printf "%s ", $0}'

    local proj_input=""
    while [[ "$proj_input" != "1" && "$proj_input" != "2" ]]; do
        echo -e "\nSelect data retrieval option:"
        echo "  1. All columns"
        echo "  2. Specific columns"
        read -rp "Enter choice [1-2]: " proj_input
        [[ "$proj_input" != "1" && "$proj_input" != "2" ]] && echo "Invalid choice. Try again."
    done

    if [[ "$proj_input" == "1" ]]; then
        desired_cols=("${fields[@]}")
    else
        while true; do
            read -rp "Enter column names to retrieve (comma separated): " user_input
            if [[ -z "$user_input" ]]; then
                echo "Enter at least one column name."
                continue
            fi
            IFS=',' read -ra desired_cols <<<"$user_input"
            for i in "${!desired_cols[@]}"; do
                desired_cols[$i]=$(echo "${desired_cols[$i]}" | xargs)
            done
            local invalid=0
            for col in "${desired_cols[@]}"; do
                if ! printf '%s\n' "${fields[@]}" | grep -qx "$col"; then
                    echo "Error: Column '$col' does not exist."
                    invalid=1
                fi
            done
            ((invalid == 0)) && break
            echo "Enter valid column names."
        done
    fi

    local filter_choice=""
    while [[ ! "$filter_choice" =~ ^[YyNn]$ ]]; do
        read -rp "Do you want to filter rows based on a column value? (y/n): " filter_choice
        [[ ! "$filter_choice" =~ ^[YyNn]$ ]] && echo "Invalid input. Enter y or n."
    done

    if [[ "$filter_choice" =~ ^[Yy]$ ]]; then
        while true; do
            read -rp "Enter the column name to filter on: " filter_col_name
            filter_col_name=$(echo "$filter_col_name" | xargs)
            if printf '%s\n' "${fields[@]}" | grep -qx "$filter_col_name"; then
                read -rp "Enter the filter value: " filter_val
                filter_val=$(echo "$filter_val" | xargs)
                if [[ -z "$filter_val" ]]; then
                    echo "Filter value cannot be empty."
                    continue
                fi
                break
            else
                echo "Error: Column '$filter_col_name' not found. Try again."
            fi
        done
    fi

    declare -A col_indices
    for i in "${!fields[@]}"; do
        local field="${fields[$i]}"
        local idx=$((i + 1))
        if printf '%s\n' "${desired_cols[@]}" | grep -qx "$field"; then
            col_indices["$field"]=$idx
        fi
        if [[ -n "$filter_col_name" && "$filter_col_name" == "$field" ]]; then
            filter_col_index=$idx
        fi
    done

    local indexes=()
    for index in "${col_indices[@]}"; do
        indexes+=("$index")
    done
    IFS=$'\n' sorted_indexes=($(sort -n <<<"${indexes[*]}"))
    unset IFS
    local serialized_array
    serialized_array=$(printf "%s " "${sorted_indexes[@]}")
    serialized_array=$(echo "$serialized_array" | sed 's/[[:space:]]*$//')

    get_table_columns | awk -F':' '{printf "%s | ", $0} END {print ""}'

    awk -v columns_indexes="$serialized_array" \
        -v filter_col_index="$filter_col_index" \
        -v filter_val="$filter_val" \
        -f ./awk/select_script.awk "$data_file"

    pause
}
